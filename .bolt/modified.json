[["/home/project/src/components/ServerView.tsx","import React, { useState } from 'react';\nimport { Server, Component, DeviceComponent, CommonComponent, PackageDependency, BinaryDependency } from '../types';\nimport { Search, HardDrive, Box, ChevronDown, ChevronRight, Code, List, Package, Binary, File } from 'lucide-react';\nimport JsonViewer from './JsonViewer';\n\ninterface ServerViewProps {\n  server: Server;\n}\n\ninterface TabProps {\n  label: string;\n  icon: React.ReactNode;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nconst Tab: React.FC<TabProps> = ({ label, icon, isActive, onClick }) => (\n  <button\n    className={`flex items-center px-4 py-2 text-sm font-medium ${\n      isActive\n        ? 'text-primary-600 dark:text-primary-400 border-b-2 border-primary-600 dark:border-primary-400'\n        : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'\n    }`}\n    onClick={onClick}\n  >\n    {icon}\n    <span className=\"ml-2\">{label}</span>\n  </button>\n);\n\nconst ServerView: React.FC<ServerViewProps> = ({ server }) => {\n  const [activeTab, setActiveTab] = useState<string>('package');\n  const [selectedComponent, setSelectedComponent] = useState<Component | null>(null);\n  const [viewMode, setViewMode] = useState<'table' | 'json'>('table');\n  const [jsonViewMode, setJsonViewMode] = useState<'interactive' | 'text'>('interactive');\n  const [expandedFiles, setExpandedFiles] = useState<string[]>([]);\n\n  const renderJsonView = () => (\n    <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow\">\n      <div className=\"flex justify-end mb-2\">\n        <button\n          onClick={() => setJsonViewMode(jsonViewMode === 'interactive' ? 'text' : 'interactive')}\n          className=\"px-3 py-1 text-sm bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded\"\n        >\n          {jsonViewMode === 'interactive' ? 'Text View' : 'Interactive View'}\n        </button>\n      </div>\n      {jsonViewMode === 'interactive' ? (\n        <JsonViewer data={server} name={server.name} />\n      ) : (\n        <pre className=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-lg overflow-x-auto text-sm\">\n          {JSON.stringify(server, null, 2)}\n        </pre>\n      )}\n    </div>\n  );\n\n  const renderTable = (data: any[], columns: string[]) => (\n    <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n      <thead className=\"bg-gray-50 dark:bg-gray-800\">\n        <tr>\n          {columns.map((column) => (\n            <th\n              key={column}\n              scope=\"col\"\n              className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\"\n            >\n              {column}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n        {data.map((item, index) => (\n          <tr key={index}>\n            {columns.map((column) => (\n              <td key={column} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                {item[column.toLowerCase()]}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n\n  const renderFileTable = (files: string[]) => (\n    <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n      <thead className=\"bg-gray-50 dark:bg-gray-800\">\n        <tr>\n          <th\n            scope=\"col\"\n            className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\"\n          >\n            File Name\n          </th>\n          <th\n            scope=\"col\"\n            className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\"\n          >\n            Content\n          </th>\n        </tr>\n      </thead>\n      <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n        {files.map((file) => (\n          <tr key={file}>\n            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{file}</td>\n            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n              <button\n                onClick={() => toggleFileExpansion(file)}\n                className=\"text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-300\"\n              >\n                {expandedFiles.includes(file) ? 'Hide Content' : 'Show Content'}\n              </button>\n              {expandedFiles.includes(file) && (\n                <div className=\"mt-2\">\n                  <JsonViewer data={getMockJsonContent(file)} name={file} />\n                </div>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n\n  const toggleFileExpansion = (file: string) => {\n    setExpandedFiles((prev) =>\n      prev.includes(file) ? prev.filter((f) => f !== file) : [...prev, file]\n    );\n  };\n\n  const getMockJsonContent = (file: string) => {\n    return {\n      \"key1\": \"value1\",\n      \"key2\": {\n        \"nestedKey\": \"nestedValue\"\n      },\n      \"key3\": [1, 2, 3]\n    };\n  };\n\n  const renderComponentDetails = (component: Component) => {\n    const isDeviceComponent = 'pid' in component;\n    const deviceComponent = component as DeviceComponent;\n    const commonComponent = component as CommonComponent;\n\n    return (\n      <div className=\"mt-4\">\n        <div className=\"mb-4\">\n          <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-2\">Details</h4>\n          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n            <div>URL: {component.url}</div>\n            <div>Version: {component.version}</div>\n            <div>Commit: {component.commit}</div>\n            {isDeviceComponent && <div>PID: {deviceComponent.pid}</div>}\n          </div>\n        </div>\n        <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden\">\n          <div className=\"flex border-b border-gray-200 dark:border-gray-700\">\n            <Tab\n              label=\"Package Dependencies\"\n              icon={<Package className=\"w-4 h-4\" />}\n              isActive={activeTab === 'package'}\n              onClick={() => setActiveTab('package')}\n            />\n            <Tab\n              label=\"Binary Dependencies\"\n              icon={<Binary className=\"w-4 h-4\" />}\n              isActive={activeTab === 'binary'}\n              onClick={() => setActiveTab('binary')}\n            />\n            {!isDeviceComponent && (\n              <Tab\n                label=\"Files\"\n                icon={<File className=\"w-4 h-4\" />}\n                isActive={activeTab === 'file'}\n                onClick={() => setActiveTab('file')}\n              />\n            )}\n          </div>\n          <div className=\"overflow-x-auto p-4\">\n            {isDeviceComponent ? (\n              <>\n                {activeTab === 'package' && renderTable(deviceComponent.packageDependencies, ['Name', 'Commit'])}\n                {activeTab === 'binary' && renderTable(deviceComponent.binaryDependencies, ['Name', 'Version'])}\n              </>\n            ) : (\n              <>\n                {activeTab === 'package' && renderTable(commonComponent.dependencies.map(dep => ({ name: dep })), ['Name'])}\n                {activeTab === 'file' && renderFileTable(commonComponent.files)}\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderComponentList = () => (\n    <div className=\"space-y-2\">\n      {server.components.map((component) => (\n        <button\n          key={component.name}\n          onClick={() => setSelectedComponent(component)}\n          className={`flex items-center w-full text-left px-4 py-2 rounded-md ${\n            selectedComponent?.name === component.name\n              ? 'bg-primary-100 dark:bg-primary-800 text-primary-700 dark:text-primary-200'\n              : 'hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300'\n          }`}\n        >\n          {'pid' in component ? (\n            <HardDrive className=\"w-5 h-5 mr-2 text-primary-500 dark:text-primary-400\" />\n          ) : (\n            <Box className=\"w-5 h-5 mr-2 text-secondary-500 dark:text-secondary-400\" />\n          )}\n          <span>{component.name}</span>\n        </button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm overflow-hidden\">\n      <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex justify-between items-center\">\n          <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">Server: {server.name}</h2>\n          <button\n            onClick={() => setViewMode(viewMode === 'table' ? 'json' : 'table')}\n            className=\"px-3 py-2 bg-primary-100 dark:bg-primary-700 text-primary-700 dark:text-primary-100 rounded-md\"\n          >\n            {viewMode === 'table' ? 'JSON View' : 'Table View'}\n          </button>\n        </div>\n      </div>\n      <div className=\"p-4\">\n        {viewMode === 'json' ? (\n          renderJsonView()\n        ) : (\n          <div className=\"flex\">\n            <div className=\"w-1/3 pr-4 border-r border-gray-200 dark:border-gray-700\">\n              {renderComponentList()}\n            </div>\n            <div className=\"w-2/3 pl-4\">\n              {selectedComponent ? (\n                renderComponentDetails(selectedComponent)\n              ) : (\n                <div className=\"text-gray-500 dark:text-gray-400\">Select a component to view details</div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ServerView;"]]